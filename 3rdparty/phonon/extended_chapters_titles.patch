Index: addoninterface.h
===================================================================
--- addoninterface.h	(revision 134)
+++ addoninterface.h	(working copy)
@@ -54,8 +54,12 @@
         };
         enum ChapterCommand {
             availableChapters,
+            /** \deprecated */
             chapter,
-            setChapter
+            currentChapter,
+            /** \deprecated */
+            setChapter,
+            setCurrentChapter
         };
         enum AngleCommand {
             availableAngles,
@@ -64,8 +68,12 @@
         };
         enum TitleCommand {
             availableTitles,
+            /** \deprecated */
             title,
+            currentTitle,
+            /** \deprecated */
             setTitle,
+            setCurrentTitle,
             autoplayTitles,
             setAutoplayTitles
         };
Index: mediacontroller.cpp
===================================================================
--- mediacontroller.cpp	(revision 134)
+++ mediacontroller.cpp	(working copy)
@@ -51,10 +51,16 @@
 {
     QObject::connect(m_backendObject, SIGNAL(availableSubtitlesChanged()), q, SIGNAL(availableSubtitlesChanged()));
     QObject::connect(m_backendObject, SIGNAL(availableAudioChannelsChanged()), q, SIGNAL(availableAudioChannelsChanged()));
+    QObject::connect(m_backendObject, SIGNAL(availableChaptersChanged()), q, SIGNAL(availableChaptersChanged()));
+    QObject::connect(m_backendObject, SIGNAL(availableTitlesChanged()), q, SIGNAL(availableTitlesChanged()));
+
+    //Deprecated
     QObject::connect(m_backendObject, SIGNAL(titleChanged(int)), q, SIGNAL(titleChanged(int)));
     QObject::connect(m_backendObject, SIGNAL(availableTitlesChanged(int)), q, SIGNAL(availableTitlesChanged(int)));
     QObject::connect(m_backendObject, SIGNAL(chapterChanged(int)), q, SIGNAL(chapterChanged(int)));
     QObject::connect(m_backendObject, SIGNAL(availableChaptersChanged(int)), q, SIGNAL(availableChaptersChanged(int)));
+    //!Deprecated
+
     QObject::connect(m_backendObject, SIGNAL(angleChanged(int)), q, SIGNAL(angleChanged(int)));
     QObject::connect(m_backendObject, SIGNAL(availableAnglesChanged(int)), q, SIGNAL(availableAnglesChanged(int)));
 }
@@ -87,6 +93,7 @@
     return ret;
 }

+//Deprecated
 int MediaController::availableTitles() const
 {
     IFACE 0;
@@ -94,6 +101,7 @@
             AddonInterface::availableTitles).toInt();
 }

+//Deprecated
 int MediaController::currentTitle() const
 {
     IFACE 0;
@@ -101,6 +109,7 @@
             AddonInterface::title).toInt();
 }

+//Deprecated
 void MediaController::setCurrentTitle(int titleNumber)
 {
     IFACE;
@@ -124,14 +133,21 @@

 void MediaController::nextTitle()
 {
+    //Deprecated
     setCurrentTitle(currentTitle() + 1);
+
+    //TODO
 }

 void MediaController::previousTitle()
 {
+    //Deprecated
     setCurrentTitle(currentTitle() - 1);
+
+    //TODO
 }

+//Deprecated
 int MediaController::availableChapters() const
 {
     IFACE 0;
@@ -139,6 +155,7 @@
             AddonInterface::availableChapters).toInt();
 }

+//Deprecated
 int MediaController::currentChapter() const
 {
     IFACE 0;
@@ -146,6 +163,7 @@
             AddonInterface::chapter).toInt();
 }

+//Deprecated
 void MediaController::setCurrentChapter(int titleNumber)
 {
     IFACE;
@@ -188,6 +206,20 @@
         AddonInterface::currentSubtitle).value<SubtitleDescription>();
 }

+ChapterDescription MediaController::currentChapter2() const
+{
+    IFACE ChapterDescription();
+    return iface->interfaceCall(AddonInterface::ChapterInterface,
+        AddonInterface::currentChapter).value<ChapterDescription>();
+}
+
+TitleDescription MediaController::currentTitle2() const
+{
+    IFACE TitleDescription();
+    return iface->interfaceCall(AddonInterface::TitleInterface,
+        AddonInterface::currentTitle).value<TitleDescription>();
+}
+
 QList<AudioChannelDescription> MediaController::availableAudioChannels() const
 {
     QList<AudioChannelDescription> retList;
@@ -207,6 +239,26 @@
     return retList;
 }

+QList<ChapterDescription> MediaController::availableChapters2() const
+{
+    QList<ChapterDescription> retList;
+    IFACE retList;
+    retList = iface->interfaceCall(AddonInterface::ChapterInterface,
+        AddonInterface::availableChapters)
+        .value< QList<ChapterDescription> >();
+    return retList;
+}
+
+QList<TitleDescription> MediaController::availableTitles2() const
+{
+    QList<TitleDescription> retList;
+    IFACE retList;
+    retList = iface->interfaceCall(AddonInterface::TitleInterface,
+        AddonInterface::availableTitles)
+        .value< QList<TitleDescription> >();
+    return retList;
+}
+
 void MediaController::setCurrentAudioChannel(const Phonon::AudioChannelDescription &stream)
 {
     IFACE;
@@ -221,6 +273,20 @@
         AddonInterface::setCurrentSubtitle, QList<QVariant>() << qVariantFromValue(stream));
 }

+void MediaController::setCurrentChapter(const Phonon::ChapterDescription &chapter)
+{
+    IFACE;
+    iface->interfaceCall(AddonInterface::ChapterInterface,
+        AddonInterface::setCurrentChapter, QList<QVariant>() << qVariantFromValue(chapter));
+}
+
+void MediaController::setCurrentTitle(const Phonon::TitleDescription &title)
+{
+    IFACE;
+    iface->interfaceCall(AddonInterface::TitleInterface,
+        AddonInterface::setCurrentTitle, QList<QVariant>() << qVariantFromValue(title));
+}
+
 #undef IFACE

 } // namespace Phonon
Index: mediacontroller.h
===================================================================
--- mediacontroller.h	(revision 134)
+++ mediacontroller.h	(working copy)
@@ -60,10 +60,24 @@
         int availableAngles() const;
         int currentAngle() const;

+        /**
+         * \deprecated
+         */
         int availableChapters() const;
+
+        /**
+         * \deprecated
+         */
         int currentChapter() const;

+        /**
+         * \deprecated
+         */
         int availableTitles() const;
+
+        /**
+         * \deprecated
+         */
         int currentTitle() const;

         bool autoplayTitles() const;
@@ -85,6 +99,22 @@
         SubtitleDescription currentSubtitle() const;

         /**
+         * Returns the selected chapter.
+         *
+         * \see availableChapters
+         * \see setCurrentChapter
+         */
+        ChapterDescription currentChapter2() const;
+
+        /**
+         * Returns the selected title.
+         *
+         * \see availableTitles
+         * \see setCurrentTitle
+         */
+        TitleDescription currentTitle2() const;
+
+        /**
          * Returns the audio streams that can be selected by the user. The
          * strings can directly be used in the user interface.
          *
@@ -103,6 +133,24 @@
         QList<SubtitleDescription> availableSubtitles() const;

         /**
+         * Returns the chapter that can be selected by the user. The
+         * strings can directly be used in the user interface.
+         *
+         * \see selectedChapter
+         * \see setCurrentChapter
+         */
+        QList<ChapterDescription> availableChapters2() const;
+
+        /**
+         * Returns the title that can be selected by the user. The
+         * strings can directly be used in the user interface.
+         *
+         * \see selectedTitle
+         * \see setCurrentTitle
+         */
+        QList<TitleDescription> availableTitles2() const;
+
+        /**
          * Selects an audio stream from the media.
          *
          * Some media formats allow multiple audio streams to be stored in
@@ -128,11 +176,37 @@
          */
         void setCurrentSubtitle(const Phonon::SubtitleDescription &stream);

+        /**
+         * Selects a chapter from the media.
+         *
+         * \param chapter description of a chapter
+         *
+         * \see availableChapters()
+         * \see currentChapter()
+         */
+        void setCurrentChapter(const Phonon::ChapterDescription &chapter);
+
+        /**
+         * Selects a title from the media.
+         *
+         * \param title description of a title
+         *
+         * \see availableTitles()
+         * \see currentTitle()
+         */
+        void setCurrentTitle(const Phonon::TitleDescription &title);
+
     public Q_SLOTS:
         void setCurrentAngle(int angleNumber);
+
+        /**
+         * \deprecated
+         */
         void setCurrentChapter(int chapterNumber);

         /**
+         * \deprecated
+         *
          * Skips to the given title \p titleNumber.
          *
          * If it was playing before the title change it will start playback on the new title if
@@ -160,11 +234,30 @@
     Q_SIGNALS:
         void availableSubtitlesChanged();
         void availableAudioChannelsChanged();
+        void availableChaptersChanged();
+        void availableTitlesChanged();
+
         void availableAnglesChanged(int availableAngles);
         void angleChanged(int angleNumber);
+
+        /**
+         * \deprecated
+         */
         void availableChaptersChanged(int availableChapters);
+
+        /**
+         * \deprecated
+         */
         void chapterChanged(int chapterNumber);
+
+        /**
+         * \deprecated
+         */
         void availableTitlesChanged(int availableTitles);
+
+        /**
+         * \deprecated
+         */
         void titleChanged(int titleNumber);

     protected:
Index: objectdescription.h
===================================================================
--- objectdescription.h	(revision 134)
+++ objectdescription.h	(working copy)
@@ -60,8 +60,11 @@
          * Lists all processing effects the backend supports.
          */
         EffectType,
+
         AudioChannelType,
         SubtitleType,
+        ChapterType,
+        TitleType,

         /**
          * Audio capture devices. This can be soundcards (with different drivers), soundservers or
@@ -301,16 +304,22 @@
 //typedef ObjectDescription<VisualizationType> VisualizationDescription;
 typedef ObjectDescription<AudioChannelType> AudioChannelDescription;
 typedef ObjectDescription<SubtitleType> SubtitleDescription;
+typedef ObjectDescription<ChapterType> ChapterDescription;
+typedef ObjectDescription<TitleType> TitleDescription;

 } //namespace Phonon

 Q_DECLARE_METATYPE(Phonon::AudioChannelDescription)
 Q_DECLARE_METATYPE(Phonon::SubtitleDescription)
+Q_DECLARE_METATYPE(Phonon::ChapterDescription)
+Q_DECLARE_METATYPE(Phonon::TitleDescription)
 Q_DECLARE_METATYPE(Phonon::AudioOutputDevice)
 Q_DECLARE_METATYPE(Phonon::AudioCaptureDevice)
 Q_DECLARE_METATYPE(Phonon::EffectDescription)
 Q_DECLARE_METATYPE(QList<Phonon::AudioChannelDescription>)
 Q_DECLARE_METATYPE(QList<Phonon::SubtitleDescription>)
+Q_DECLARE_METATYPE(QList<Phonon::ChapterDescription>)
+Q_DECLARE_METATYPE(QList<Phonon::TitleDescription>)
 Q_DECLARE_METATYPE(QList<Phonon::AudioOutputDevice>)
 Q_DECLARE_METATYPE(QList<Phonon::AudioCaptureDevice>)
 Q_DECLARE_METATYPE(QList<Phonon::EffectDescription>)
